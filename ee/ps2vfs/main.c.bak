/*
  _____     ___ ____
   ____|   |    ____|      PSX2 OpenSource Project
  |     ___|   |____       (C)2002, David Ryan ( oobles@hotmail.com )
  ------------------------------------------------------------------------
  ps2link.c                PS2 TCPIP LINK PROGRAM.
*/
#include <compat.h>
#include <tamtypes.h>
#include <stdio.h>
#include <kernel.h>
#include <sifrpc.h>
#include <malloc.h>
#include <fileio.h>

typedef struct
{
	
	u32 size;
    u8 cmd[5];
}ps2nfs_command;
typedef struct
{
	
	u32 size;
    u8 name[256];
}ps2nfs_file;

#include "hw.h"

#include <ps2ip.h>
char buffer[100];
t_ip_info ip_info;
void loadModules(void)
{
    int ret;
    IP4_ADDR(&ip_info.ipaddr,172,26,0,5);
	IP4_ADDR(&ip_info.gw,172,26,0,1);
	IP4_ADDR(&ip_info.netmask,255,255,255,240);

    ret = sif_load_module("host:ps2debug.irx",0,NULL);
    if ( ret< 0 ) {
       return;
    }
    
    ret = sif_load_module("host:ps2ip.irx", 0, NULL);
    if (ret < 0) {
	return;  // Failed to load driver.
    }

    

    /*ret = sif_load_module("host:ps2klsi.irx", 0, NULL);
    if (ret < 0) {
	return; // Failed to load driver.
    }*/
    ret = sif_load_module("host:ps2smap.irx", sizeof(t_ip_info), (char *)&ip_info);
    if (ret < 0) {
	return; // Failed to load driver.
    }
	ret = sif_load_module("host:ps2ips.irx", 0, NULL);
    if (ret < 0) {
	return;  // Failed to load driver.
    }
	ret = sif_load_module("host:ps2vfs.irx", 0, NULL);
    if (ret < 0) {
	return;  // Failed to load driver.
    }

/*    ret = sif_load_module("host:ps2echo.irx",0,NULL);
    if ( ret < 0 ) {
       return; // Failed to load driver.
    }*/
/*
    ret = sif_load_module("host:ps2http.irx",0,NULL);
    if ( ret < 0 ) {
       return;
    }*/


}

// filedriver buffer 
/*
static char readBuffer[ 128 ] __attribute((aligned(16)));

// rpc variables and buffers.
static struct t_rpc_client_data rpcsif  __attribute__((aligned(64)));
static char rpcBuffer[128] __attribute__((aligned(16)));


static struct t_rpc_data_queue queue __attribute__((aligned(64)));
static struct t_rpc_server_data server __attribute__((aligned(64)));
static char rpcBuffer[ 128 ] __attribute__((aligned(16)));

void * rpcHandlerFunction( unsigned int command, void * rpcBuffer, int size )
{
   scr_printf( "handler called" );
   return rpcBuffer;
}
*/
char mimeBuffer[100];

int main()
{
    int whichdrawbuf = 0;
    int s;
    int rpcinit, threadId;
    int ret;
    char buffer1[9];
	char *buffer;
	int i;
int size;
   int rc;
   int fd;
//Socket var
 
    // Initialise RPC system.

    sif_rpc_init(0);
    
    // Setup the Video.

    DmaReset();
    initGraph(3);
    SetVideoMode();
    //install_VRstart_handler();

    // Setup the double buffers.

   // SetDrawFrameBuffer(1);
   // SetDrawFrameBuffer(0);
   // SetCrtFrameBuffer(1);

    // Load the modules!

    loadModules();


    // Loaded the modules.. now try ps2ip now..
    if(ps2ip_init()<0)
	{
		printf("ERROR: ps2ip_init failed2");
		k_SleepThread();
	}
    fd=fio_open("ps2vfs:\\primer\\segun\\mio.txt",O_RDONLY);
	if (fd>0)
	{
		printf("el id de fichero es %d \n");
		size=fio_lseek(fd,0,SEEK_END);
		i=fio_lseek(fd,0,SEEK_SET);
		buffer=(char *)malloc(sizeof(char)*size);
		i=fio_read(fd,buffer,size);
		
		printf("receive size:  %d \n",i);
		printf("receive: buffer= %s \n",buffer);
		//fio_read(fd,buffer1,9);
		//for(i=0;i<10000;i++)
		//{
		//}
	//	printf("receive: read= %s \n",buffer1);
		//printf("receive: read= %s \n",buffer);
		fio_close(fd);
			
	}
           
	
	

	
	
	while ( 1 )
	{
        //WaitForNextVRstart(1);

        //ClearVRcount();
        //SetCrtFrameBuffer(whichdrawbuf);
        //whichdrawbuf ^= 1;
        //SetDrawFrameBuffer(whichdrawbuf);
//        scr_printf( "t" );
    } 

    // We shouldn't get here.. but just in case.

    k_SleepThread();

}


